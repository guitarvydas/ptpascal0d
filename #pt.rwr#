pt {
  Program [_program ID FormalParameters _semicolon Block _dot] =
    ‛\n(define («ID» «FormalParameters») «Block»)’

  FormalParameters_empty [_lp _rp] = ‛’
  FormalParameters_nonempty [_lp p ps* _rp] = ‛«p» «ps»’
  
  FormalParameter_var [_var ID] = ‛«ID»’
  FormalParameter_id [ID] = ‛«ID»’
    
  CommaFormalID [_comma FormalID] = ‛«FormalID»’
  FormalID [ID] ‛«ID»’

  Block = ConstantDefinitions

  ConstantDefinitions =
    | kw<"const"> ConstantDefinition -- consts
    | TypeDefinitions -- noconsts
  TypeDefinitions =
    | kw<"type"> TypeDefinition -- types
    | VariableDeclarations -- notypes
  VariableDeclarations =
    | kw<"var"> VariableDeclaration -- variables
    | ProcedureDefinitions -- novariables

    ConstantDefinition =
      | ID "=" ConstantValue ";" ConstantDefinition -- consts
      | TypeDefinitions -- noconsts
    TypeDefinition =
      | ID "=" TypeBody ";" TypeDefinition -- types
      | VariableDeclarations -- notypes
    VariableDeclaration =
      | ID ":" TypeBody ";" VariableDeclaration -- vars
      | ProcedureDefinitions -- novars
    ProcedureDefinitions =
      | kw<"procedure"> ID ProcedureHeading Block ";" ProcedureDefinitions -- proc
      | BeginStatement -- noproc

    ConstantValue =  
      | Integer
      | ID
      | Literal

    TypeBody =
      | _packed"> _array"> "[" SimpleType "]" _of"> SimpleType -- packedarray
      |              _array"> "[" SimpleType "]" _of"> SimpleType -- array
      | _file">                                  _of"> SimpleType -- file
      |                                                      SimpleType -- simple

    SimpleType =
      | ID ".." Integer -- idrange
      | ID -- id
      | Integer ".." Integer -- intrange

   VariableDeclaration = ID ":" TypeBody ";"

   ProcedureHeading = FormalParameters ";"


     BeginStatement = _begin"> Statement SemicolonStatement* _end">

     SemicolonStatement = ";" Statement

     Statement =
       | BeginStatement
       | IfStatement
       | WhileStatement
       | CaseStatement
       | RepeatStatement
       | AssignmentStatement
       | CallStatement

     IfStatement = _if"> Expression _then"> Statement ElseStatement?
     ElseStatement = _else"> Statement

     WhileStatement = _while"> Expression _do"> Statement
     CaseStatement = _case"> Expression _of"> CaseAlternative+ _end">
     RepeatStatement = _repeat"> Statement _until"> Expression
     AssignmentStatement = Lval ":=" Expression
     CallStatement =
       | ID "(" ExprWithFieldWidth ("," ExprWithFieldWidth)* ")" -- withargs
       | ID  -- noargs

     ExprWithFieldWidth = Expression (":" Expression)?

       Lval = ID LvalSubscript? 
       LvalSubscript = "[" Expression "]"

	 
       CaseAlternative = Integer CommaInteger* ":" Statement
       CommaInteger = "," Integer

     Expression = 
       | SimpleExpression "="  SimpleExpression -- eq
       | SimpleExpression "<>" SimpleExpression -- ne
       | SimpleExpression "<"  SimpleExpression -- lt
       | SimpleExpression "<=" SimpleExpression -- le
       | SimpleExpression ">"  SimpleExpression -- gt
       | SimpleExpression ">=" SimpleExpression -- ge
       | SimpleExpression -- other

      SimpleExpression = ("+" | "-")? Term (("+" | "-" | _or">) Term)*
      Term = 
        | Factor "*"       Factor -- mul
        | Factor _div"> Factor -- div
        | Factor _mod"> Factor -- mod
        | Factor _and"> Factor -- and
        | Factor -- other
	
      Factor =
	| Integer -- int
	| "(" Expression ")" -- parenthesized
	| _not"> Factor -- not
	| Literal -- lit
	| ID IdentifierExtension -- idwithextension
	| ID -- other

       IdentifierExtension =
         | "[" Expression "]" -- subscript
	 | "(" Expression ")" -- paren

       
	Integer =
	  | "-" unsignedInteger -- neg
	  | "+" unsignedInteger -- pos
	  |     unsignedInteger -- other

	  id<s> = "❲" s "❳"
	  kw<s> = id<s>
	  ID = "❲"  idchar+  "❳"
	  idchar = ~"❲" ~"❳" any
	  unsignedInteger = digit+
	  Literal = "“" litchar* "”"
	  litchar = ~"“" ~"”" any
}
