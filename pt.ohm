        pt {
  Program = kw<"program"> ID FormalParameters ";" Block "."
 
  FormalParameters =
    | "(" ")" -- empty
    | "(" FormalParameter CommaFormalID* ")" -- nonempty

  FormalParameter =
    | kw<"var"> ID -- var
    |           ID -- id
    
  CommaFormalID = "," FormalID
  FormalID = ID

  Block = ConstantDefinitions

  ConstantDefinitions =
    | kw<"const"> ConstantDefinition -- consts
    | TypeDefinitions -- noconsts
  TypeDefinitions =
    | kw<"type"> TypeDefinition -- types
    | VariableDeclarations -- notypes
  VariableDeclarations =
    | kw<"var"> VariableDeclaration -- variables
    | ProcedureDefinitions -- novariables

    ConstantDefinition =
      | ID "=" ConstantValue ";" ConstantDefinition -- consts
      | TypeDefinitions -- noconsts
    TypeDefinition =
      | ID "=" TypeBody ";" TypeDefinition -- types
      | VariableDeclarations -- notypes
    VariableDeclaration =
      | ID ":" TypeBody ";" VariableDeclaration -- vars
      | ProcedureDefinitions -- novars
    ProcedureDefinitions =
      | kw<"procedure"> ID ProcedureHeading Block ";" ProcedureDefinitions -- proc
      | BeginStatement -- noproc


    ConstantValue =  
      | Integer
      | ID
      | Literal

    TypeBody =
      | kw<"packed"> kw<"array"> "[" SimpleType "]" kw<"of"> SimpleType -- packedarray
      |              kw<"array"> "[" SimpleType "]" kw<"of"> SimpleType -- array
      | kw<"file">                                  kw<"of"> SimpleType -- file
      |                                                      SimpleType -- simple

    SimpleType =
      | ID ".." Integer -- idrange
      | ID -- id
      | Integer ".." Integer -- intrange


    ProcedureHeading = FormalParameters ";"

     Statement =
       | BeginStatement
       | IfStatement
       | WhileStatement
       | CaseStatement
       | RepeatStatement
       | AssignmentStatement
       | CallStatement

     Continuation = ";" Statement
     
     BeginStatement = kw<"begin"> Statement kw<"end"> Continuation?

     IfStatement = kw<"if"> Expression kw<"then"> Statement ElseStatement? Continuation?
     ElseStatement = kw<"else"> Statement

     WhileStatement = kw<"while"> Expression kw<"do"> Statement Continuation?
     CaseStatement = kw<"case"> Expression kw<"of"> CaseAlternative+ kw<"end"> Continuation?
     RepeatStatement = kw<"repeat"> Statement kw<"until"> Expression Continuation?
     AssignmentStatement = Lval ":=" Expression Statement? Continuation?
     CallStatement =
       | ID "(" Arg CommaArg* ")"  Continuation? -- withargs
       | ID  Continuation? -- noargs

       Arg = Expression
       ArgWithFieldWidth = Expression ColonExpression
       ColonExpression = ":" Expression
       CommaArg = "," Arg

       Lval =
         | ID "[" Expression "]" -- subscripted
         | ID                    -- plain

         
       CaseAlternative = Integer CommaInteger* ":" Statement
       CommaInteger = "," Integer

     Expression = BooleanOrExpression

     BooleanOrExpression = 
       | BooleanAndExpression kw<"or"> BooleanOrExpression -- or
       | BooleanAndExpression -- other
     BooleanAndExpression = 
       | BooleanExpression kw<"and"> BooleanAndExpression -- and
       | BooleanExpression -- other

     BooleanExpression =
       | SimpleExpression "="  BooleanExpression -- eq
       | SimpleExpression "<>" BooleanExpression -- ne
       | SimpleExpression "<"  BooleanExpression -- lt
       | SimpleExpression "<=" BooleanExpression -- le
       | SimpleExpression ">"  BooleanExpression -- gt
       | SimpleExpression ">=" BooleanExpression -- ge
       | SimpleExpression -- other

      SimpleExpression =
        | Term "-" SimpleExpression -- minus
        | Term "+" SimpleExpression -- plus
        | Term -- other
      
      Term = 
        | Factor "*"       Term -- mul
        | Factor kw<"div"> Term -- div
        | Factor kw<"mod"> Term -- mod
        | Factor kw<"and"> Term -- and
        | Factor -- other
        
      Factor =
        | "(" Expression ")" -- parenthesized
        | kw<"not"> Factor -- not
        | Literal -- lit
        | Integer
        | "-" Variable -- negvar
        | "+"? Variable -- var

        Variable =
          | Variable Subscript -- subscript
          | ID -- id
          
        Subscript = "[" Expression "]"

        Integer =
          | "-" unsignedInteger -- neg
          | "+"? unsignedInteger -- other
          
          id<s> = "❲" s "❳"
          kw<s> = id<s>
          ID = "❲"  idchar+  "❳"
          idchar = ~"❲" ~"❳" any
          unsignedInteger = digit+
          Literal = "“" litchar* "”"
          litchar = ~"“" ~"”" any
}
